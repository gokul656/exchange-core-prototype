package org.malware.orderbook;

import lombok.Getter;
import org.malware.order.Order;
import org.malware.order.OrderBookEntry;
import org.malware.order.OrderType;

import java.util.*;

@Getter
public class OrderBook implements IOrderBookEntry {

    private HashMap<String, OrderBookEntry> orders = new HashMap<>();
    private final SortedSet<Level> bids = new TreeSet<>();
    private final SortedSet<Level> asks = new TreeSet<>();

    @Override
    public void addOrder(Order order) {
        Level level = new Level(order.getPrice());
        addOrder(order, level, order.getOrderType() == OrderType.BUY ? bids : asks, orders);
    }

    private void addOrder(Order order, Level baseLevel, SortedSet<Level> levelLevels, HashMap<String, OrderBookEntry> internalOrderBook) {
        Level level = levelLevels.contains(baseLevel) ? levelLevels
                .stream()
                .filter(it -> it.head.equals(baseLevel.head))
                .findFirst()
                .orElse(null) : null;

        if (level != null) {
            OrderBookEntry orderBookEntry = new OrderBookEntry(order, baseLevel);

            if (level.head == null) {
                level.head = orderBookEntry;
            } else {
                OrderBookEntry tailPointer = level.tail;
                tailPointer.next = orderBookEntry;
                orderBookEntry.previous = tailPointer;
            }

            level.tail = orderBookEntry;
            internalOrderBook.put(order.getId(), orderBookEntry);
        } else {
            levelLevels.add(baseLevel);

            OrderBookEntry orderBookEntry = new OrderBookEntry(order, baseLevel);
            baseLevel.head = orderBookEntry;
            baseLevel.tail = orderBookEntry;

            internalOrderBook.put(order.getId(), orderBookEntry);
        }
    }

    @Override
    public void updateOrder(Order order) {

    }

    @Override
    public void removeOrder(String orderId) {

    }

    @Override
    public List<OrderBookEntry> getBuyOrders() {
        List<OrderBookEntry> orderBookEntries = new ArrayList<>();
        bids.forEach(
                bidLevel -> {
                    if (!bidLevel.isEmpty()) {
                        OrderBookEntry bidLimitPointer = bidLevel.head;
                        while (bidLimitPointer != null) {
                            orderBookEntries.add(bidLimitPointer);
                            bidLimitPointer = bidLimitPointer.next;
                        }
                    }
                }
        );

        return orderBookEntries;
    }

    @Override
    public List<OrderBookEntry> getSellOrders() {
        List<OrderBookEntry> orders = new ArrayList<>();
        asks.forEach(
                ask -> {
                    OrderBookEntry askLimitPointer = ask.head;
                    while (askLimitPointer != null) {
                        orders.add(askLimitPointer);
                        askLimitPointer = askLimitPointer.next;
                    }
                }
        );

        return orders;
    }
}
